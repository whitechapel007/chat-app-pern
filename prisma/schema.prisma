// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @default(cuid())
  username String @unique
  email String @unique
  fullName String
  password String
  gender Gender
  profilePic String @default("")
  isOnline Boolean @default(false)
  lastSeen DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Messages sent by this user
  sentMessages Message[] @relation("MessageSender")

  // Conversations this user participates in
  participations ConversationParticipant[]

  @@map("users")
}


model Conversation {
  id String @id @default(cuid())
  type ConversationType @default(DIRECT)
  name String? // For group chats
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Messages in this conversation
  messages Message[]

  // Participants in this conversation
  participants ConversationParticipant[]

  @@map("conversations")
}


model Message {
  id String @id @default(cuid())
  content String
  type MessageType @default(TEXT)
  senderId String
  conversationId String
  replyToId String? // For message replies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo Message? @relation("MessageReply", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageReply")

  @@map("messages")
}

model ConversationParticipant {
  id String @id @default(cuid())
  conversationId String
  userId String
  role ParticipantRole @default(MEMBER)
  joinedAt DateTime @default(now())
  leftAt DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

// Enums
enum Gender {
  male
  female
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ParticipantRole {
  ADMIN
  MEMBER
}
